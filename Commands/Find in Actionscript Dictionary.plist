<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
# encoding: utf-8

#
# Ale Muñoz &lt;ale@bomberstudios.com&gt; - 2006-11-25
# Feel free to use and improve
# 
# Gaby Vanhegan &lt;gaby@vanhegan.knet&gt; - 2007-05-16
# Amended to search all actionscript help folders. This makes all
# the component, flash lite, remoting, etc help available in the
# help browser.


require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
require ENV['TM_SUPPORT_PATH'] + "/lib/escape"
require ENV['TM_SUPPORT_PATH'] + "/lib/progress"
require ENV["TM_SUPPORT_PATH"] + "/lib/web_preview"
require "rexml/document"

WORD    = ENV['TM_CURRENT_WORD']
HELPTOC = '/help_toc.xml'

def nice_name toc_file
  toc_lines = IO.readlines(toc_file)
  return toc_lines[1].match(/[A-Z][A-Za-z0-9\s.,_]*/).to_s
end

def get_help_dirs
  help_dirs = []
  help_dirs_options = [
    "/Library/Application Support/Adobe/Flash CS3/en/Configuration/HelpPanel/Help/",
    "#{ENV['HOME']}/Library/Application Support/Adobe/Flash CS3/en/Configuration/HelpPanel/Help/",
    "/Users/Shared/Library/Application Support/Macromedia/Flash 8/en/Configuration/HelpPanel/Help/",
    "/Users/Shared/Library/Application Support/Macromedia/Flash MX 2004/en/Configuration/HelpPanel/Help/"
  ]
  # Try to locate help dir
  help_dirs_options.each do |path|
    if File.exist? "#{path}"
      help_dirs &lt;&lt; path
    end
  end
  if help_dirs.empty?
    # Help dir not found...
    puts html_head({:title =&gt; "Error!", :sub_title =&gt; "Find in ActionScript Dictionary"})
    puts "
    &lt;h1&gt;Search failed for “#{WORD}”&lt;/h1&gt;
    &lt;p&gt;In order for this command to work TextMate needs to know where to find the ActionScript Dictionary index file. The commands tries to find it in the following places:&lt;/p&gt;
    &lt;ul&gt;"
    help_dirs_options.each do |path|
      puts "&lt;li&gt;#{path}&lt;/li&gt;"
    end
    puts "&lt;/ul&gt;
    &lt;p&gt;If the command can't find the index file, you can set a search path manually:
    &lt;ul&gt;
    &lt;li&gt;Open &lt;strong&gt;Preferences » Advanced » Shell Variables&lt;/strong&gt;.&lt;/li&gt;
    &lt;li&gt;Click &lt;strong&gt;+&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Name the variable &lt;code&gt;TM_FLASH_HELP&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Set the value to the path to the directory containing the help_toc.xml file on your system.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;/p&gt;
    "
    html_footer
    # exit
    TextMate.exit_show_html
  end
  return help_dirs
end

def get_search_dirs
  search_dirs = []
  get_help_dirs.each do |search_dir|
    Dir.entries(search_dir).each do |dir|
      search_dirs.push( search_dir + dir ) if File.exists?(search_dir + dir + HELPTOC);
    end
  end
  return search_dirs
end

def find_matching_lines
  search_results = {}
  get_search_dirs.each do |path|
    current_toc_file = path + HELPTOC
    IO.readlines("#{current_toc_file}").each do |line|
      if line.match(/name=\"#{WORD}/)
        section = nice_name(current_toc_file)
        if search_results[section].nil?
          search_results[section] = []
        end
        xml_line = REXML::Document.new(line.strip)
        search_results[section] &lt;&lt; "&lt;li&gt;&lt;a href=\"file://#{path}/#{xml_line.root.attributes['href']}\"&gt;#{xml_line.root.attributes['name']}&lt;/a&gt;&lt;/li&gt;"
      end
    end
  end
  return search_results
end

puts html_head( :title =&gt; "Documentation for ‘#{WORD}’", :sub_title =&gt; "ActionScript Dictionary" )

matches = find_matching_lines
if matches.length &gt; 0
  find_matching_lines.each do |section|
    puts "&lt;h3&gt;" + section[0] + "&lt;/h3&gt;"
    puts "&lt;ul&gt;"
    section.shift
    section.each do |match|
      puts match
    end
    puts "&lt;/ul&gt;"
  end
else
  puts "No results :("
end

html_footer
TextMate.exit_show_html
</string>
	<key>fallbackInput</key>
	<string>word</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>^h</string>
	<key>name</key>
	<string>Find in Actionscript Dictionary</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>discard</string>
	<key>scope</key>
	<string>source.actionscript.2 </string>
	<key>semanticClass</key>
	<string>lookup.define.actionscript</string>
	<key>uuid</key>
	<string>8B98F650-78F7-11D9-B2B4-000A95C5F126</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>

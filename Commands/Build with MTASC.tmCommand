<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveModifiedFiles</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby18
#
# Build - compile ActionScript using MTASC
#
# Based on a command by Chris Sessions, Released on 2006-06-02.
# Copyright (c) 2006. MIT License.
# Modified by Ale Muñoz &lt;http://bomberstudios.com&gt; on 2006-11-24.
# Improvements suggested by Juan Carlos Añorga &lt;http://www.juanzo.com/&gt;, Helmut Granda &lt;http://helmutgranda.com&gt;

require "open3"
require "yaml"
require "erb"

require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
require ENV['TM_SUPPORT_PATH'] + "/lib/progress"
require ENV["TM_SUPPORT_PATH"] + "/lib/web_preview"

# Some routes
@file_path = File.dirname(ENV['TM_FILEPATH'])
@file_name = ENV['TM_FILENAME']
@project_path = ENV['TM_PROJECT_DIRECTORY']

def get_build_path
  if File.exist?("#{@file_path}/mtasc.yaml")
    return @file_path + "/"
  end
  if File.exist?("#{@project_path}/mtasc.yaml")
    return @project_path + "/"
  end
  return false
end

# Utils
@q = "\""

def warning(text, title)
  html_header("Error!","Build With MTASC")
  puts "&lt;h1&gt;#{title}&lt;/h1&gt;"
  puts "&lt;p&gt;#{text}&lt;/p&gt;"
  html_footer
  TextMate.exit_show_html
end

def get_config
  @build_path = get_build_path()
  if !@build_path
    @build_path = @file_path + "/"
    @config = YAML.load(File.open(ENV['TM_BUNDLE_SUPPORT'] + "/mtasc.yaml"))
    @config['app'] = File.basename(@file_name)
    @config['swf'] = File.basename(@file_name,".as")+".swf"
    @config['mtasc_path'] = "#{ENV['TM_BUNDLE_SUPPORT']}/bin/mtasc"
  else
    @config = YAML.load(File.open(@build_path + "mtasc.yaml"))
    # If width or height is a percentage. MTASC chokes because it needs a number. Fix it.
    if @config['width'] =~ /%/ || @config['height'] =~ /%/
      @size_is_percentage = true
      @config['width'].gsub!(/%/,'')
      @config['height'].gsub!(/%/,'')
    end
    if @config['mtasc_path'].nil?
      @config['mtasc_path'] = "#{ENV['TM_BUNDLE_SUPPORT']}/bin/mtasc"
    end
  end
  return @config
end

def preview
  return ERB.new(IO.read("#{ENV['TM_BUNDLE_SUPPORT']}/swf_template.rhtml")).result
end

def mtasc_compile
  config = get_config()

  # MTASC binary
  cmd = @q + @config['mtasc_path'] + @q

  # App name
  cmd += " " + @q + @config['app'] + @q

  # Player version
  cmd += " -version " + @config['player'].to_s

  # User-provided Classpath
  if !@config['classpaths'].nil?
    cmd += " -cp \"" + @config['classpaths'].join('" -cp "') + "\" "
  end

  # Additional parameters from mtasc.yaml
  if @config['params']
    cmd += " #{@config['params']} "
  end

  if @config['trace']
    case @config['trace']
      when "xtrace"
        %x(open "$TM_BUNDLE_SUPPORT/bin/XTrace.app")
        cmd += " -cp \"#{ENV['TM_BUNDLE_SUPPORT']}/lib/\" -pack com/mab/util -trace com.mab.util.debug.trace "
      when "console"
        log_file_path = "#{ENV['HOME']}/Library/Preferences/Macromedia/Flash Player/Logs/"
        if(!File.exist?(log_file_path))
          Dir.mkdir(log_file_path)
          File.new("#{log_file_path}/flashlog.txt",'w')
        end
        %x(open -a Console.app "#{log_file_path}/flashlog.txt")
      when "terminal"
        log_file_path = "#{ENV['HOME']}/Library/Preferences/Macromedia/Flash Player/Logs/"
        if(!File.exist?(log_file_path))
          Dir.mkdir(log_file_path)
          File.new("#{log_file_path}/flashlog.txt",'w')
        end
        %x(osascript "$TM_BUNDLE_SUPPORT/Tools/tail.applescript")
      when "no"
        cmd += " -trace no "
      else
        cmd += " -trace #{@config['trace']} "
    end
  end

  if !File.exists? @config['swf']
    cmd += " -header #{@config['width']}:#{@config['height']}:#{@config['fps']}"
  end

  cmd += " -swf #{@config['swf']}"

  stdin, stdout, stderr = Open3.popen3(cmd)
  warnings = []
  errors = []

  while err = stderr.gets
    if err[0, 10] == 'Warning : '
      warnings.push(err.chomp)
    else
      m = /(.+):([0-9]+): characters ([0-9]+)/.match(err)
      if m != nil
        a = "txmt://open?url=file://#{@project_path}/#{m[1]}&amp;line=#{m[2]}&amp;column=#{m[3].to_i + 1}"
        err = "&lt;a href=\"#{a}\"&gt;#{err}&lt;/a&gt;"
      end
      errors.push(err.chomp)
    end
  end
  if !errors.empty?
    warning "#{errors.uniq.join('&lt;/p&gt;&lt;p&gt;')} &lt;br/&gt; &lt;pre&gt;#{cmd}&lt;/pre&gt;", "Errors:"
  end
  if !warnings.empty?
    warning "#{warnings.uniq.join('&lt;/p&gt;&lt;p&gt;')} &lt;br/&gt; &lt;pre&gt;#{cmd}&lt;/pre&gt;", "Warnings:"
  end
  if errors.empty? &amp;&amp; warnings.empty?
    if @config['preview'] == 'textmate'
      puts preview()
      TextMate.exit_show_html
    else
      %x(open #{@config['preview']})
    end
  else
    TextMate.exit_show_html
  end
end

# compile with MTASC
TextMate.call_with_progress({:title =&gt; "MTASC", :message =&gt; "Compiling Classes"}) do
  mtasc_compile
end
</string>
	<key>input</key>
	<string>none</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>@r</string>
	<key>name</key>
	<string>Build With MTASC</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>discard</string>
	<key>scope</key>
	<string>source.actionscript.2</string>
	<key>semanticClass</key>
	<string>process.run.actionscript</string>
	<key>uuid</key>
	<string>E0105691-3033-43C1-A4A2-4C2785446748</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
